<?php
/**
 *  Router dispatcher generated by crodas/Dispatcher
 *
 *  https://github.com/crodas/Dispatcher
 *
 *  This is a generated file, do not modify it.
 */
namespace SimpleTest;

class NotFoundException extends \Exception 
{
}

class Request
{
    protected $var;

    public function set($name, $value)
    {
        $this->var[$name] = $value;
        return $this;
    }

    public function get($name)
    {
        if (array_key_exists($name, $this->var)) {
            return $this->var[$name];
        }
        return NULL;
    }
}

class Route
{
    public function fromRequest(Request $req = NULL)
    {
        if (empty($req)) {
            $req = new Request;
        }
        return $this->doRoute($req, $_SERVER);
    }

    public function doRoute(Request $req, $server)
    {
        $parts  = array_values(array_filter(explode("/", $server['REQUEST_URI'])));
        $length = count($parts);

        if (empty($server['REQUEST_METHOD'])) {
            $server['REQUEST_METHOD'] = 'GET';
        }

        switch ($server["REQUEST_METHOD"]) {
        case 'GET':
            switch ($length) {
            case 2:
                if ($parts[0] === 'foo' && $parts[1] === 'function') {
                    // Routes for /foo/function
                    if ($parts[0] === 'foo' && $parts[1] === 'function') {
                        // do route
                        return \Controller($req);
                    }
                    // end of /foo/function
                }
                if ($parts[0] === 'xxx') {
                    if (empty($obj_filt_23cd7755)) {
                        $obj_filt_23cd7755 = new \Foo;
                    }
                    // Routes for /xxx/{foobar}
                    if ($parts[0] === 'xxx' && (!empty($filter_6727d712_1) || ($filter_6727d712_1=$obj_filt_23cd7755->simple_filter($req, 'foobar', $parts[1])))) {
                        $req->set('foobar', $parts[1]);
                        // do route
                        return \Controller($req);
                    }
                    // end of /xxx/{foobar}
                }
                break;
            }
            break;
        }
        
        switch ($length) {
        case 2:
            if (empty($obj_filt_23cd7755)) {
                $obj_filt_23cd7755 = new \Foo;
            }
            // Routes for /foo/method
            if ($parts[0] === 'foo' && $parts[1] === 'method') {
                // do route
                return $obj_filt_23cd7755->Bar($req);
            }
            // end of /foo/method
            
            if (empty($obj_filt_23cd7755)) {
                $obj_filt_23cd7755 = new \Foo;
            }
            if (empty($obj_filt_23cd7755)) {
                $obj_filt_23cd7755 = new \Foo;
            }
            if (empty($obj_filt_23cd7755)) {
                $obj_filt_23cd7755 = new \Foo;
            }
            // Routes for /foo/{foobar}.{ext:extension}
            if ($parts[0] === 'foo' && preg_match('/(.+)\\.(.+)/', $parts[1], $matches_1) > 0 && $obj_filt_23cd7755->simple_filter($req, 'foobar', $matches_1[1]) && $obj_filt_23cd7755->ext_filter($req, 'extension', $matches_1[2])) {
                $req->set('foobar', $matches_1[1]);
                $req->set('extension', $matches_1[2]);
                // do route
                return $obj_filt_23cd7755->TestingComplexUri($req);
            }
            // end of /foo/{foobar}.{ext:extension}
            break;
        }

        throw new NotFoundException;
    }
}
