<?php
/**
 *  Router dispatcher generated by crodas/Dispatcher
 *
 *  https://github.com/crodas/Dispatcher
 *
 *  This is a generated file, do not modify it.
 */
@set($ns, "crodas\\Dispatcher\\Generate\\t" . uniqid(true))
namespace {{ $ns }};

use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpFoundation\Request;

class Router
{
    public function fromRequest(Request $req = NULL)
    {
        if (empty($req)) {
            $req = Request::createFromGlobals();
        }
        return $this->doRoute($req, $_SERVER);
    }

    @foreach($self->getComplexUrls() as $id => $url)
        @include('complexurl')
    @end

    protected function handleComplexUrl(Request $req, $parts, $length, $server)
    {
        @foreach ($self->getComplexUrls() as $id => $url)
            $is_candidate = $length >= {{$url->getMinLength()}}
            @set($consts, $url->getConstants())
            @if ($url->getFirstConstant())
                && $parts[0] == {{@$url->getFirstConstant()}}
            @end
            @if ($url->getLastConstant())
                && $parts[$length-1] == {{@$url->getLastConstant()}}
            @end
            @if (count($consts) > 0)
                && count(array_intersect($parts, {{@$consts}})) == {{count($consts)}}
            @end
                ;
            if ($is_candidate && $this->complexUrl{{$id}}($req, $parts, $length, $server, $r) == true) {
                return $r;
            }
        @end

        @if ($self->getNotFoundHandler())
            {{ $self->getNotFoundHandler() }};
        @end
        throw new NotFoundHttpException;
    }

    public function doRoute(Request $req, $server)
    {
        $uri    = $server['REQUEST_URI'];
        $uri    = ($p = strpos($uri, '?')) ? substr($uri, 0, $p) : $uri;
        $parts  = array_values(array_filter(explode("/", $uri)));
        $length = count($parts);
        $req->uri = $uri;

        if (empty($server['REQUEST_METHOD'])) {
            $server['REQUEST_METHOD'] = 'GET';
        }

        {{ $groups->__toString() }}

        // We couldn't find any handler for the URL,
        // let's find in our complex url set (if there is any)
        $this->handleComplexUrl($req, $parts, $length, $server);
    }

    public static function getRoute($name, $args = array())
    {
        if (!is_array($args)) {
            $args = func_get_args();
            array_shift($args);
        }

        $count = count($args);
        switch ($name) {
        @foreach ($self->getNamedUrls() as $name => $route)
        case {{@$name}}:
            @foreach ($route['routes'] as $id => $url)
                if ({{$url->getGeneratorFilter()}}) {
                    return {{$url->getGeneratorExpr()}};
                }
            @end
            throw new RouteNotFoundException("Invalid arguments for route {{$name}}, possible routes:\n{{$route['exception']}}");
            break;
        @end
        }

        throw new RouteNotFoundException("There is not route name $name");
    }

}

return new Router;
